beads 1 program Game2048

// -------------------------------------------
assets local:"snd/"
	file:"end.ogg" label:SOUND_LOST
	file:"win.ogg" label:SOUND_WON
	file:"swipe.ogg" label:SOUND_SWIPE
	file:"select.ogg" label:SOUND_SELECT

// -------------------------------------------
const
	DEBUG = N
	VERSION = 1
	duration = 1 day // change to 30 days or more - 
	gap = 4
	colors = [#cdc1b4 #eee4da #ede0c8 #f2b179 #f59563 #f67c5f #f65e3b #edcf72 #edcc61 #edc850 #edc53f #edc22e #edc22e]
	pak = 'Press any key.'
	help_msg ='''
➧ The goal of this game is make a tile reach the value of 2048
➧ The board starts of with two occupied tiles
➧ On each round a new tile gets added with the value of 2 or
at 10% of the times with the value of 4
➧ If you run out of tiles you lose
➧ There are 4 movements you can supply to the game
using arrows keys (right, left, up, and down)
➧ For each of this movements the tiles move to the direction
specified
➧ If two tiles have the same value the get added up just once.
➧ If 2 occupied tiles share the same row or column but are
seperated by empty tiles then the occupied tiles travel along
the empty tiles stacking in the direction they were directed

* Press 'H' for this help.
* Press 'N' for new game.
* Press 'Backspace' to undo last move. 
'''
	
record a_hof
	date : str
	score
	
record a_game
	version : num
	board : array of num
	state  : (S_PLAY S_NOMOVES S_WON S_CONTINUE S_HELP S_MENU S_MOBILE S_END)
	blanks : num
	moves : num
	size : num
	score : num
	best : num
	scorem : num
	hof : array of num

// -------------------------------------------
var
	g : a_game
	p_state : num
	p_game : a_game
	moved : yesno
	bkg : color
	color : color
	msg : str

// -------------------------------------------
vert slice d_msg(
	fgcolor : color = YELLOW
	bkcolor : color = DODGER_BLUE
	align : num = CENTER
	fbold : yesno = Y
	)
	under
		draw_rect(fill:bkcolor, thick:0 pt, opacity:0.8)
		log 'M:{msg} AL:{align} BL:{fbold}'
	add 9 al
		draw_str(msg, color:fgcolor, size:0.5, just:align, bold:fbold) 
	add 1 al
		draw_rect(fill:SIENNA, thick:1 pt, opacity:0.7)
		draw_str(pak, size:0.5, bold:Y,color:YELLOW)
	skip 1 al
track
	case e.evkind
	| EV_TAP, EV_KEYBOARD
		case g.state
		| S_WON
			g.state = S_CONTINUE
		| S_HELP
			g.state = p_state
		| S_NOMOVES
			init_board
		return Y

// -------------------------------------------
calc add_tile
	var
		v = 2 if random() < 0.9 else 4
		p = random_int(1,g.blanks)
	dec g.blanks
	loop reps:16 count:ix
		if is_numeric(g.board[ix])
			continue
		dec p
		if p == 0
			g.board[ix]=v
			exit

// -------------------------------------------
calc can_move
	var
		p = 1
	if g.blanks > 0
		return
	loop reps:4 count:r
		loop reps:4 count:c
			log "pos: {r}x{c} p={p}" on:DEBUG
			if c < 4
				log "{g.board[p]}={g.board[p+1]}?" on:DEBUG
				if g.board[p] == g.board[p+1]
					return
			if r < 4
				log "{g.board[p]}={g.board[p+4]}?" on:DEBUG
				if g.board[p] == g.board[p+4]
					return
			inc p
	g.state = S_NOMOVES
	sound_play(SOUND_LOST)

// -------------------------------------------
calc exec_move(
	dir
	)
	/*
	if g.state == S_WON
		g.state = S_CONTINUE
		return
	if g.state == S_NOMOVES
		init_board
		return
	*/
	moved = N
	p_game <=== g
	case dir
	| KEYCODE_UP
		try_move(1, 4, 1)
	| KEYCODE_LEFT
		try_move(1, 1, 4)
	| KEYCODE_DOWN
		try_move(13, -4, 1)
	| KEYCODE_RIGHT
		try_move(4, -1, 4)
	if moved
		//sound_play(SOUND_SWIPE)
		inc g.moves
		moved = N
		add_tile
		cookie_write('2048',g,duration:duration)
	can_move
	
// -------------------------------------------
calc init_board
	g.board <=== []
	g.blanks = 16
	add_tile
	add_tile
	g.score = 0
	g.moves = 0
	g.state = S_PLAY
	p_game <=== g

// -------------------------------------------
calc try_move(
	p1
	ix
	iy
	)
	var
		x1
		x2		
	loop reps:4
		x1=p1
		x2=p1+ix
		p1=p1+iy	
		loop reps:3
			if g.board[x2] == U
				x2 = x2 + ix
			elif g.board[x1] == U
				g.board[x1] = g.board[x2]
				g.board[x2] = U
				x2 = x2 + ix
				moved = Y
			elif g.board[x1] == g.board[x2]
				g.board[x1] = g.board[x1] * 2
				g.score = g.score + g.board[x1]
				g.best = g.best if g.score < g.best else g.score
				if g.board[x1] == 2048
					if g.state == S_PLAY
						sound_play(SOUND_WON)
						log "play sound won"
						g.state = S_WON
				inc g.blanks
				moved = Y
				g.board[x2] = U
				x1 = x1 + ix
				x2 = x2 + ix
			else 
				x1 = x1 + ix
				if g.board[x1] == U
					swap g.board[x1] <=> g.board[x2]
					moved = Y
				x2 = x2 + ix

// -------------------------------------------
draw my_button (
	prompt : str
	action : calc (frozen)
	)
	var g = min(bb.height, bb.width)*0.2
	var r = solve_rect(basis:bb,inset:g)
	var radius = min(r.height, r.width)*0.1
	draw_rect(box:r,fill:SKY_BLUE, color:STEEL_BLUE, pos:0,corner:radius, thick:1,pos:0)
	draw_str(prompt, color:STEEL_BLUE, size:0.4, bold:Y)
track EV_TAP
	action()
	return Y
// -------------------------------------------
horz slice d_buttons
	under
		draw_rect(fill:GRAY4)
	add 20 al
		my_button('Undo',undo_move)
	add 20 al
		my_button('New',new_game)
	add 20 al
		my_button('HOF',not_yet)
// -------------------------------------------
vert slice d_game
	add 1 al d_top
	add 9 al d_board
	add 1 al d_buttons

// -------------------------------------------
horz slice d_top
	bkg = LIGHT_YELLOW
	add 50 al
		draw_rect(fill:bkg, thick:1 pt,pos:0)
		draw_str("Score\n{g.score}", size:0.3, bold:Y)	
	add 50 al
		draw_rect(fill:bkg, thick:1 pt,pos:0)
		draw_str("Best\n{g.best}", size:0.3, bold:Y)	
	add 50 al
		draw_rect(fill:bkg, thick:1 pt,pos:0)
		draw_str("Moves\n{g.moves}", size:0.3, bold:Y)	
	
// -------------------------------------------
grid d_board
	horz slice
		skip gap al
		loop reps:4
			add 40 al
			skip gap al
	vert slice
		skip gap al
		loop reps:4
			add 40 al
			skip gap al
	under
		draw_rect(fill:#BBADA0)
	cell	
		var 
			v  = g.board[b.cell_seq] if is_numeric(g.board[b.cell_seq]) else ""
			ix = round(lg(g.board[b.cell_seq],base:2))
		case ix
		| >12
			ix = 13
		| >0
			inc ix
		else
			ix = 1			
		color = colors[ix]
		var radius = min(bb.height, bb.width)*0.1
		draw_rect(fill:color, thick:0 pt,corner:radius)
		draw_str(v, size:0.5, bold:Y)
	over
		case g.state
		| S_WON
			msg = 'Congratulations!\nYou made it.\n2048'
			d_msg
		| S_NOMOVES
			msg="Game over."
			d_msg(bkcolor:RED)
		| S_HELP
			msg = help_msg
			d_msg(fgcolor:RED,fbold:N,align:LEFT)
			
// -------------------------------------------
track EV_KEYBOARD
	if e.keycode == 78 // N - new game
		new_game
		return Y
	if e.keycode == 72 // H - help
		p_state = g.state
		g.state = S_HELP
		return Y
	if e.keycode == KEYCODE_BS // undu last move
		undo_move
	exec_move(e.keycode)
	return Y

calc new_game
	if browser_confirm('Are you shure?')
		init_board
calc undo_move
	g <=== p_game

calc not_yet
	browser_alert('Sorry\nNot implemented yet')
		
// -------------------------------------------
calc main_init
	if DEBUG
		init_board
		g.blanks = 0
		g.board <=== [2 4 8 4 8 2 16 4 32 128 32 8 2048 512 256 64]
		g.board <=== [2 4 8 4 8 2 16 4 32 128 32 8 1024 1024 256 64]
		can_move
		return
	if cookie_exists('2048')
		g <=== cookie_read('2048') as a_game
		p_game <=== g
		can_move
	else
		g.best = 0
		g.score = 0
		g.moves = 0
		init_board
	 
// -------------------------------------------
draw main_draw
	if runtime.touch_kind == TOUCH_FINGER
		draw_rect(fill:ORANGE_RED)
		draw_str('Sorry.\nThis games is not working\non mobiles yet.\nPlease, wait for a new version.', color:YELLOW, bold:Y)
	else
		layer area:solve_rect(basis:b.box, pin:MID_CENTER, aspect:0.8) d_game		
